
/*
 * NOTE: If the filter clause is using a key that's unique, not null and numeric, we could use it instead of the MongoDB autogenerated _id 
 */


function massiveupdate(database,collection,searchcond,chunksize,delay_between_chunks,delay_between_docs)
{

    function updatedoc(doc)
    {
        doc.grades = []
        colobj.save(doc)

        return doc._id
    }


    // ===== MAIN ======

	// Instantiate database and collection objects
    var dbobj = new Mongo().getDB(database);
    var colobj = dbobj.getCollection(collection);
    var j = 1

    
    /*
     * WARNING
     *
     * The operations to determine upper_id and lower_id WILL NOT read a single document
     * as the _id and the search condition are using different indexes. We need the _id 
     * values because they are unique and ordered.
     *
     * MongoDB will scan the _id index forward (for lower_id) and backwards (for
     * upper_id) until it finds the first document that matches the search condition. That could 
     * require a few doc fetches or thousands, depending on how scattered the target 
     * documents are.
     *
     * Bottom line is that finding upper_id and lower_id could might not be trivial and
     * we need to make sure that these queries are kept under control.
     *
     */

    // Find upper bound
    var totaldocscur = colobj.find(searchcond,{_id:1}).sort({_id:1})
    var upper_id = totaldocscur[totaldocscur.length()-1]._id

    // Find lower bound
    var lower_id = totaldocscur[0]._id
    totaldocscur = 0


    // Just initializing lastDoc_id to something
    var lastDoc_id = lower_id


    // Build $and clause combining to include _id bounds
    var andclause = []
    andclause.push(searchcond)
    andclause.push({_id:{$gte:lastDoc_id}})

    while(lastDoc_id < upper_id)
    {
	    // Update operation
    	docstoupd = colobj.find({$and:andclause}).limit(chunksize)
		docstoupdcnt = docstoupd.count(true)
        docstoupd.forEach(function(doc){
            lastDoc_id = updatedoc(doc);
            sleep(delay_between_docs)
        })
        print('Chunk '+j+': '+docstoupdcnt)
        j=j+1
        andclause[1]._id = {$gte:lastDoc_id}        
        sleep(delay_between_chunks)
    }
    print('Process completed')
}
